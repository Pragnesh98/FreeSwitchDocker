--[[
	The Initial Developer of the Original Code is

	Portions created by the Initial Developer are Copyright (C)
	the Initial Developer. All Rights Reserved.

	Contributor(s):

	Progressive Dialer 
--]]
	
-- 	local cache = require "resources.functions.redisDB"
-- 	local redis = require "resources.functions.redis";
	require "resources.functions.config";
-- 	local json = require "resources.functions.lunajson"
	
-- 	dofile(scripts_dir.."/resources/functions/logger.lua");
-- 	dofile(scripts_dir.."/resources/functions/utility.lua");

	debug["info"] = true;
	debug['debug'] = true;
	debug['sql'] = true;

	api = freeswitch.API()

	freeswitch.consoleLog("NOTICE", "PROGRESSIVE -Trying To Find Agent..!")
	
	domain_uuid = argv[1];
	cmp_activity_type = argv[2];
	cmp_activity_value = argv[3];
	CustomerNumber = argv[4];

	tableID = argv[7];
	job_detail_uuid = argv[8]
	job_uuid = argv[5];
	camp_uuid = argv[6];
	 
	local json
	if (debug["sql"]) then
		json = require "resources.functions.lunajson"
	end
	
	local Database = require "resources.functions.database";
	dbh = Database.new('system');
	assert(dbh:connected());
	if (domain_uuid ~= nil) then
		local sql = "SELECT domain_name FROM v_domains "
			.. "WHERE domain_uuid = :domain_uuid ";
		local params = {domain_uuid = domain_uuid};
		if (debug["sql"]) then
			freeswitch.consoleLog("notice", "[DIALER] SQL: " .. sql .. "; params:" .. json.encode(params) .. "\n");
		end
		dbh:query(sql, params, function(rows)
			domain_name = rows["domain_name"];
		end);
	end

        if(camp_uuid ~= nil) then
                local sql = "SELECT siptrunk_uuid FROM v_campaign_master "
                        .. "WHERE camp_uuid = :camp_uuid ";
                local params = {camp_uuid = camp_uuid};
                if(debug["sql"]) then
                        freeswitch.consoleLog("notice","[DIALER]: ".. sql .. "; params:" .. json.encode(params) .. "\n");
                end
                dbh:query(sql, params, function(rows)
                        siptrunk_uuid = rows["siptrunk_uuid"];
                end);
        end

        if( siptrunk_uuid ~= nil) then
                local sql = "SELECT scan_prefix,siptrunk_cid_number, siptrunk_name FROM v_siptrunks "
                        .. "WHERE siptrunk_uuid = :siptrunk_uuid AND domain_uuid =:domain_uuid";
                local params = {siptrunk_uuid = siptrunk_uuid, domain_uuid = domain_uuid};
                if(debug["sql"]) then
                        freeswitch.consoleLog("notice","[DIALER]: ".. sql .. "; params:" .. json.encode(params) .. "\n");
                end
                dbh:query(sql, params, function(rows)
						siptrunk_name = rows["siptrunk_name"];
						siptrunk_cid_number = rows["siptrunk_cid_number"];
						freeswitch.consoleLog("NOTICE", "DOMAIN UUID : ["..tostring(domain_uuid).."]")
						freeswitch.consoleLog("NOTICE", "siptrunk_cid_number : ["..tostring(siptrunk_cid_number).."]")
						freeswitch.consoleLog("NOTICE", "siptrunk_name : ["..tostring(siptrunk_name).."]")
                end);
        end

	scan_prefix = nil;
	if(siptrunk_cid_number == "" or siptrunk_cid_number == nil or siptrunk_cid_number == "nil") then
		origination_caller_id_number = "923190068";
		caller_id_name = "923190068"
	else
		caller_id_name = siptrunk_cid_number;
		origination_caller_id_number = siptrunk_cid_number;
	end
	
	freeswitch.consoleLog("NOTICE", "DOMAIN UUID : ["..tostring(domain_uuid).."]")
	freeswitch.consoleLog("NOTICE", "CAMPAIGN ACTIVITY TYPE : ["..tostring(cmp_activity_type).."]")
	freeswitch.consoleLog("NOTICE", "CAMPAIGN ACTIVITY VALUE : ["..tostring(cmp_activity_value).."]")
	freeswitch.consoleLog("NOTICE", "siptrunk_cid_number : ["..tostring(siptrunk_cid_number).."]")
	freeswitch.consoleLog("NOTICE", "siptrunk_name : ["..tostring(siptrunk_name).."]")

	local leg_a_session = ""
	local disposition_reason = "UNKNOWN";
	local leg_b_session = "";
	local agent = "";
	local agent_name = "";
	local other_loopback_leg_uuid = "";
	local cc_agent_bridged = "false"
-- 	local callStartTime = os.date("%Y-%m-%d %H:%M:%S");
	local proxy = "";
	local direction = "";

	if (string.lower(cmp_activity_type) == "queue") then

		freeswitch.consoleLog("NOTICE", " DESTINATION QUEUE")
		--sofia_str="{media_webrtc=true,sip_h_X-context="..tostring(domain_name).."}sofia/internal/"..tostring(agent_number).."@"..tostring(domain_name)..";fs_path=sip:"..tostring(sipproxy);
		--freeswitch.consoleLog("NOTICE", " DialString : "..tostring(sofia_str));
		--leg_a_session = freeswitch.Session(sofia_str);
		freeswitch.consoleLog("NOTICE", " DESTINATION QUEUE")
		
		sofia_str = "{media_webrtc=true,sip_h_X-context="..tostring(domain_name)..",domain_uuid="..tostring(domain_uuid)..",origination_caller_id_name='"..tostring(caller_id_name).."',origination_caller_id_number="..tostring(caller_id_name).."}loopback/"..tostring(cmp_activity_value).."/callcenter/XML";

		freeswitch.consoleLog("NOTICE", " DialString : "..tostring(sofia_str))
		leg_a_session = freeswitch.Session(sofia_str);

		uuid = leg_a_session:getVariable("uuid")
		freeswitch.consoleLog("INFO"," CallBack loopback a-leg UUID : "..tostring(uuid));
		leg_a_session:setVariable("park_after_bridge","true")
		
		if(leg_a_session:ready()) then
			other_loopback_leg_uuid = leg_a_session:getVariable("other_loopback_leg_uuid");
			freeswitch.consoleLog("INFO"," CallBack loopback b-leg UUID : "..tostring(other_loopback_leg_uuid).."");
		end
		while(leg_a_session:ready() and cc_agent_bridged ~= "true" and other_loopback_leg_uuid ~= "") do
			os.execute("sleep 1")
			api_cmd = "uuid_getvar "..other_loopback_leg_uuid.." cc_agent_bridged";
			cc_agent_bridged = api:executeString(api_cmd)
--			freeswitch.consoleLog("NOTICE", "CallBack Agent leg bridged : '" ..tostring(cc_agent_bridged).. "'")
		end
		
		if(not leg_a_session:ready() and other_loopback_leg_uuid ~= "" and domain_name ~= nil) then
			disposition_reason = "TIMEOUT"
		end 

		if(leg_a_session:ready()) then
			agent_uuid = "";
			api_cmd = "create_uuid"
			origin_uuid_customer = api:executeString(api_cmd)

			if(other_loopback_leg_uuid ~= "") then
				api_cmd = "uuid_getvar "..tostring(other_loopback_leg_uuid).." cc_agent_uuid"
				agent_uuid = api:executeString(api_cmd)
				freeswitch.consoleLog("NOTICE", " CallBack Agent uuid " .. tostring(agent_uuid) .. "")
			end 

			if(agent_uuid ~= "") then
				api_cmd = "uuid_getvar "..tostring(other_loopback_leg_uuid).." cc_agent"
				agent_name = api:executeString(api_cmd)
				freeswitch.consoleLog("NOTICE", " CallBack Agent Name " .. tostring(agent_name) .. "")
		
				api_cmd = "uuid_getvar "..tostring(agent_uuid).." cc_agent_id"
				cc_agent_id = api:executeString(api_cmd)
				freeswitch.consoleLog("NOTICE", " CallBack Agent ID " .. tostring(cc_agent_id) .. "")
				
				api_cmd = "uuid_setvar "..tostring(agent_uuid).." session_in_hangup_hook true"
				session_in_hangup_hook = api:executeString(api_cmd)
				api_cmd = "uuid_setvar "..tostring(agent_uuid).." api_hangup_hook 'lua agent_hangup_hook.lua "..tostring(origin_uuid_customer).."'"
				api_hangup_hook = api:executeString(api_cmd)
				api_cmd = "uuid_setvar "..tostring(agent_uuid).." domain_uuid "..tostring(domain_uuid).."'"
				api_hangup_hook = api:executeString(api_cmd)
			end

-- 			api_cmd = "user_data "..tostring(cc_agent_id).."@"..tostring(domain_name).." var outbound_caller_id_name"
-- 			origination_caller_id_name = api:executeString(api_cmd)
-- 		
-- 			api_cmd = "user_data "..tostring(cc_agent_id).."@"..tostring(domain_name).." var outbound_caller_id_number"
-- 			origination_caller_id_number = api:executeString(api_cmd)
		
			if (origination_caller_id_number == "" or origination_caller_id_number == nil or origination_caller_id_number == "nil" ) then
				origination_caller_id_number = cc_agent_id;
				origination_caller_id_name = cc_agent_id;
			end
-- 			origination_caller_id_number = "923190068";
			api_cmd = "uuid_getvar "..tostring(other_loopback_leg_uuid).." cc_record_filename"
			cc_record_filename = api:executeString(api_cmd)
			freeswitch.consoleLog("NOTICE", " cc_record_filename: " .. tostring(cc_record_filename) .. "")
			api_cmd = "uuid_getvar "..tostring(other_loopback_leg_uuid).." cc_queue"
			cc_queue = api:executeString(api_cmd)
			freeswitch.consoleLog("NOTICE", " cc_queue: " .. tostring(cc_queue) .. "")
			api_cmd = "uuid_getvar "..tostring(other_loopback_leg_uuid).." cc_agent"
			cc_agent = api:executeString(api_cmd)
			freeswitch.consoleLog("NOTICE", " cc_agent: " .. tostring(cc_agent) .. "")
			
			api_cmd = "uuid_getvar "..tostring(other_loopback_leg_uuid).." cc_side"
			cc_side = api:executeString(api_cmd)
			freeswitch.consoleLog("NOTICE", " cc_side: " .. tostring(cc_side) .. "")			
			
			api_cmd = "uuid_getvar "..tostring(other_loopback_leg_uuid).." cc_cause"
			cc_cause = api:executeString(api_cmd)
			freeswitch.consoleLog("NOTICE", " cc_cause: " .. tostring(cc_cause) .. "")			

			api_cmd = "uuid_getvar "..tostring(other_loopback_leg_uuid).." cc_queue_answered_epoch"
			cc_queue_answered_epoch = api:executeString(api_cmd)
			freeswitch.consoleLog("NOTICE", " cc_queue_answered_epoch: " .. tostring(cc_queue_answered_epoch) .. "")			

			api_cmd = "uuid_getvar "..tostring(other_loopback_leg_uuid).." cc_queue_wrap_up_time"
			cc_queue_wrap_up_time = api:executeString(api_cmd);
			
			
			api_cmd = "uuid_getvar "..tostring(other_loopback_leg_uuid).." cc_agent_bridged"
			cc_agent_bridged = api:executeString(api_cmd)
			freeswitch.consoleLog("NOTICE", " cc_agent_bridged: " .. tostring(cc_agent_bridged) .. "")			
			if (cc_record_filename == "_undef_" or cc_record_filename == "" or cc_record_filename == nil or cc_record_filename == "nil") then
				cc_record_filename = "";
				freeswitch.consoleLog("NOTICE", " call recording not enabled\n")	
			end
					
			sipproxy = freeswitch.getGlobalVariable("SIPPROXYIP");
			if(scan_prefix == nil) then
				sofia_str = "{sip_h_X-xml_cdr_uuid="..tostring(origin_uuid_customer)..",sip_h_X-WRAPUP-TIME="..tostring(cc_queue_wrap_up_time)..",cc_queue_wrap_up_time="..tostring(cc_queue_wrap_up_time)..",sip_h_X-siptrunk_uuid="..tostring(siptrunk_uuid)..",cc_pstn_siptrunk_uuid="..tostring(siptrunk_uuid)..",cc_cause="..tostring(cc_cause)..",cc_queue_answered_epoch="..tostring(cc_queue_answered_epoch)..",cc_agent_bridged="..tostring(cc_agent_bridged)..",cc_agent="..tostring(cc_agent)..",cc_side="..tostring(cc_side)..",cc_queue="..tostring(cc_queue)..",domain_name="..tostring(domain_name)..",cc_record_filename="..tostring(cc_record_filename)..",sip_h_X-context="..tostring(domain_name)..",domain_uuid="..tostring(domain_uuid)..",sip_h_X-CAMP-UUID='"..tostring(camp_uuid).."',ignore_early_media=true,sip_h_X-ucall=outbound,origination_uuid="..origin_uuid_customer..",effective_caller_id_name='"..tostring(origination_caller_id_name).."',effective_caller_id_number="..tostring(origination_caller_id_number)..",origination_caller_id_name='"..tostring(origination_caller_id_name).."',origination_caller_id_number="..tostring(origination_caller_id_number).."}sofia/external/"..tostring(CustomerNumber).."@"..tostring(domain_name)..";fs_path=sip:"..tostring(sipproxy).."";
			else 
				sofia_str = "{sip_h_X-xml_cdr_uuid="..tostring(origin_uuid_customer)..",sip_h_X-siptrunk_uuid="..tostring(siptrunk_uuid)..",cc_pstn_siptrunk_uuid="..tostring(siptrunk_uuid)..",cc_cause="..tostring(cc_cause)..",cc_queue_answered_epoch="..tostring(cc_queue_answered_epoch)..",cc_agent_bridged="..tostring(cc_agent_bridged)..",cc_agent="..tostring(cc_agent)..",cc_side="..tostring(cc_side)..",cc_queue="..tostring(cc_queue)..",domain_name="..tostring(domain_name)..",cc_record_filename="..tostring(cc_record_filename)..",sip_h_X-context="..tostring(domain_name)..",domain_uuid="..tostring(domain_uuid)..",sip_h_X-CAMP-UUID='"..tostring(camp_uuid).."',ignore_early_media=true,sip_h_X-ucall=outbound,origination_uuid="..origin_uuid_customer..",effective_caller_id_name='"..tostring(origination_caller_id_name).."',effective_caller_id_number="..tostring(origination_caller_id_number)..",origination_caller_id_name='"..tostring(origination_caller_id_name).."',origination_caller_id_number="..tostring(origination_caller_id_number).."}sofia/external/"..tostring(CustomerNumber).."@"..tostring(domain_name)..";fs_path=sip:"..tostring(sipproxy).."";
			end

			freeswitch.consoleLog("INFO"," CallBack Customer Call DialString : "..tostring(sofia_str));
			
			leg_b_session = freeswitch.Session(sofia_str);
			leg_b_session:setAutoHangup(false);
			leg_a_session:setAutoHangup(false);
		
			cmd = "uuid_transfer ".. agent_uuid .." -both customeragent XML customeragent"
			result = api:executeString(cmd);

			if(leg_b_session:ready()) then
				if(leg_b_session:answered()) then
					api_cmd = "uuid_setvar "..tostring(origin_uuid_customer).." session_in_hangup_hook true"
					session_in_hangup_hook = api:executeString(api_cmd)
					api_cmd = "uuid_setvar "..tostring(origin_uuid_customer).." api_hangup_hook 'lua agent_hangup_hook.lua "..tostring(agent_uuid).."'"
					api_hangup_hook = api:executeString(api_cmd)
				
					if (cc_record_filename == "_undef_" or cc_record_filename == "" or cc_record_filename == nil or cc_record_filename == "nil") then
						;
					else
						leg_b_session:execute("record_session",cc_record_filename);
						freeswitch.consoleLog("INFO"," cc_record_filename : "..tostring(cc_record_filename).."")
					end
					
					leg_b_session:setVariable("park_after_bridge","true")
					leg_b_session:setVariable("hangup_after_conference","false")
					cmd = "uuid_bridge "..origin_uuid_customer.." "..agent_uuid;
					result = api:executeString(cmd);
					freeswitch.consoleLog("INFO"," CallBack Call bridge API : "..cmd.."\t Status : "..result.."")

					cmd = "uuid_kill "..other_loopback_leg_uuid
					result = api:executeString(cmd);
					freeswitch.consoleLog("INFO"," CallBack Kill API : "..cmd.."\t Status : "..result.."")
					disposition_reason = "SUCCESS"
				end
			else
				local hangup_reason = leg_b_session:hangupCause();
				freeswitch.consoleLog("NOTICE", "leg_b_session:hangupCause() = " .. hangup_reason )
				local sql = "UPDATE  v_job_details_"..tostring(tableID).." SET job_call_status = 'PENDING', job_dial_status = 'NULL', job_dial_time = NOW() "
				.. "WHERE (job_detail_uuid =:job_detail_uuid) ";
				local params = {job_detail_uuid = job_detail_uuid};
				if (debug["sql"]) then
					freeswitch.consoleLog("notice", "[DIALER] SQL: " .. sql .. "; params:" .. json.encode(params) .. "\n");
				end
				dbh:query(sql, params);
				
				leg_b_session:hangup();
				leg_a_session:hangup();
			end
		end

	else 
		freeswitch.consoleLog("NOTICE", " DESTINATION PLAYBACK")

		origination_caller_id_name = "UVOICE";
		api_cmd = "create_uuid"
		origin_uuid_customer = api:executeString(api_cmd)
			
		sipproxy = freeswitch.getGlobalVariable("SIPPROXYIP");
		sofia_str = "{sip_h_X-xml_cdr_uuid="..tostring(origin_uuid_customer)..",sip_h_X-context="..tostring(domain_name)..",domain_uuid="..tostring(domain_uuid)..",sip_h_X-CAMP-UUID='"..tostring(camp_uuid).."',ignore_early_media=true,sip_h_X-ucall=outbound,origination_uuid="..origin_uuid_customer..",effective_caller_id_name='"..tostring(origination_caller_id_name).."',effective_caller_id_number="..tostring(origination_caller_id_number)..",origination_caller_id_name='"..tostring(origination_caller_id_name).."',origination_caller_id_number="..tostring(origination_caller_id_number).."}sofia/external/"..tostring(CustomerNumber).."@"..tostring(domain_name)..";fs_path=sip:"..tostring(sipproxy).."";
		
--		freeswitch.consoleLog("INFO"," CallBack Customer Call DialString : "..tostring(sofia_str));
		
		leg_b_session = freeswitch.Session(sofia_str);
		leg_b_session:setAutoHangup(false);
		if(leg_b_session:ready()) then
			if(leg_b_session:answered()) then
				if (string.lower(cmp_activity_type) == "playback") then
		-- 			leg_b_session:execute("playback", cmp_activity_value);
-- 					leg_b_session:execute("transfer", cmp_activity_value.." XML PLAYBACK");
					leg_b_session:execute("playback", "/usr/local/freeswitch/prompts/"..cmp_activity_value..".mp3");
					leg_b_session:hangup();
				elseif (string.lower(cmp_activity_type) == "ivr") then
					freeswitch.consoleLog("NOTICE", " DESTINATION IVR")
-- 					leg_b_session:execute("transfer", cmp_activity_value.." XML IVR");
					leg_b_session:execute("ivr", cmp_activity_value);
					leg_b_session:hangup();
				elseif (string.lower(cmp_activity_type) == "voicemail") then
					freeswitch.consoleLog("NOTICE", " DESTINATION VOICEMAIL")
					leg_b_session:execute("transfer", cmp_activity_value.." XML VOICEMAIL");
				else
					freeswitch.consoleLog("NOTICE", " DESTINATION INVALIDE")
					leg_b_session:hangup();
				end
			end
-- 		end
		else
			local hangup_reason = leg_b_session:hangupCause();
			freeswitch.consoleLog("NOTICE", "leg_b_session:hangupCause() = " .. hangup_reason )
-- 			local sql = "UPDATE  v_job_details_"..tostring(tableID).." SET job_call_status = 'PENDING', job_dial_status = 'NULL', job_dial_time = NOW() "
-- 			.. "WHERE (job_detail_uuid =:job_detail_uuid) ";
-- 			local params = {job_detail_uuid = job_detail_uuid};
-- 			if (debug["sql"]) then
-- 				freeswitch.consoleLog("notice", "[DIALER] SQL: " .. sql .. "; params:" .. json.encode(params) .. "\n");
-- 			end
-- 			dbh:query(sql, params);
		end
	
-- 	elseif (string.lower(cmp_activity_type) == "ivr") then
-- 		freeswitch.consoleLog("NOTICE", " DESTINATION IVR")
-- 	elseif (string.lower(cmp_activity_type) == "voicemail") then
-- 		freeswitch.consoleLog("NOTICE", " DESTINATION VOICEMAIL")
-- 	else
-- 		freeswitch.consoleLog("NOTICE", " DESTINATION INVALIDE")
	end

	
-- 	while(api:executeString("uuid_exists "..tostring(origin_uuid_customer)) ) do
-- 		os.execute("sleep 1")
-- 		freeswitch.consoleLog("NOTICE", "Call is Active B Session...")
-- 	end
	
	if (job_uuid ~= nil and camp_uuid ~= nil) then
		local sql = "UPDATE v_job_master SET job_running_calls = ( job_running_calls - 1 ) "
			.. "WHERE (job_uuid =:job_uuid AND  camp_uuid =:camp_uuid) ";
		local params = {job_uuid = job_uuid, camp_uuid = camp_uuid};
		if (debug["sql"]) then
			freeswitch.consoleLog("notice", "[DIALER] SQL: " .. sql .. "; params:" .. json.encode(params) .. "\n");
		end
		dbh:query(sql, params);
		
		local hangup_reason = leg_b_session:hangupCause();
		freeswitch.consoleLog("notice", "[DIALER] hangup_reason : "..tostring(hangup_reason).."\n");
		
		if (hangup_reason == "SUCCESS") then
			local sql = "UPDATE  v_job_details_"..tostring(tableID).." SET job_call_status = 'COMPLETED', job_dial_status = 'NULL', job_dial_time = NOW() "
		.. "WHERE (job_detail_uuid =:job_detail_uuid) ";

			local params = {job_detail_uuid = job_detail_uuid};
			if (debug["sql"]) then
				freeswitch.consoleLog("notice", "[DIALER] SQL: " .. sql .. "; params:" .. json.encode(params) .. "\n");
			end
			dbh:query(sql, params);
		
		else 
			local sql = "UPDATE  v_job_details_"..tostring(tableID).." SET job_call_status = 'FAILED', job_dial_status = 'NULL', job_dial_time = NOW() "
		.. "WHERE (job_detail_uuid =:job_detail_uuid) ";
			local params = {job_detail_uuid = job_detail_uuid};
			if (debug["sql"]) then
				freeswitch.consoleLog("notice", "[DIALER] SQL: " .. sql .. "; params:" .. json.encode(params) .. "\n");
			end
			dbh:query(sql, params);
			freeswitch.consoleLog("notice", "[DIALER] Hangup call.\n");
			leg_b_session:hangup();
			leg_a_session:hangup();
		end
	end

	
	
	
